#!/bin/bash
# Script hu·∫•n luy·ªán m√¥ h√¨nh OCR ƒëa ng√¥n ng·ªØ (Anh, Vi·ªát, Trung) v·ªõi Tesseract 5.x trong Docker, c√≥ Early Stopping

set -e

echo "üìÅ Th∆∞ m·ª•c l√†m vi·ªác: $(pwd)"

# --- Ki·ªÉm tra phi√™n b·∫£n Tesseract ---
TESSERACT_VERSION=$(tesseract --version | head -n1 | cut -d' ' -f2)
if [[ ! $TESSERACT_VERSION =~ ^5\..* ]]; then
    echo "‚ùå L·ªói: Y√™u c·∫ßu Tesseract 5.x. Phi√™n b·∫£n hi·ªán t·∫°i: $TESSERACT_VERSION"
    exit 1
fi

# --- Bi·∫øn c·∫•u h√¨nh ---
export TESSDATA_PREFIX=/usr/local/share/tessdata
export TESSERACT_OEM=1
MODEL_NAME="multi_lang"
GROUND_TRUTH_DIR="/tesseract/tesstrain/data/multi_lang-ground-truth"
DATA_DIR="/tesseract/tesstrain/data"
MODEL_DIR="${DATA_DIR}/${MODEL_NAME}"
LSTM_TRAIN_FILE="/tesseract/tesstrain/lstm.train"
MAX_ITERATIONS=200000
LEARNING_RATE=0.001  # TƒÉng t·ª´ 0.0001 ƒë·ªÉ c·∫£i thi·ªán t·ªëc ƒë·ªô h·ªçc
STOP_THRESHOLD=0.001

mkdir -p "${GROUND_TRUTH_DIR}" "${MODEL_DIR}"

# --- T·∫°o lstm.train n·∫øu ch∆∞a c√≥ ---
if [ ! -f "${LSTM_TRAIN_FILE}" ]; then
    echo -e "load_system_dawg 0\nload_freq_dawg 0" > "${LSTM_TRAIN_FILE}"
    chmod u+r "${LSTM_TRAIN_FILE}"
else
    grep -q "load_system_dawg 0" "${LSTM_TRAIN_FILE}" || echo "load_system_dawg 0" >> "${LSTM_TRAIN_FILE}"
    grep -q "load_freq_dawg 0" "${LSTM_TRAIN_FILE}" || echo "load_freq_dawg 0" >> "${LSTM_TRAIN_FILE}"
fi

echo "üìÑ N·ªôi dung lstm.train:"
cat "${LSTM_TRAIN_FILE}"

# --- Ki·ªÉm tra traineddata g·ªëc ---
for lang in eng vie; do
    traineddata_file="${TESSDATA_PREFIX}/${lang}.traineddata"
    if [ ! -f "${traineddata_file}" ]; then
        echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ${traineddata_file}"
        exit 1
    fi
done

# --- S·ª≠a Makefile n·∫øu c·∫ßn (cho Tesseract 5.4 tr·ªü l√™n) ---
MAKEFILE="/tesseract/tesstrain/Makefile"
if grep -q "tesseract.*--psm 13 lstm.train" "${MAKEFILE}"; then
    sed -i 's/--psm 13 lstm.train/--psm 13 --oem 1/' "${MAKEFILE}"
fi

# --- Ph√¢n t√≠ch k√Ω t·ª± ---
echo "üî† Ph√¢n t√≠ch k√Ω t·ª±..."
cat "${GROUND_TRUTH_DIR}"/*.gt.txt | grep -o . | sort | uniq -c | sort -nr > "${DATA_DIR}/char_distribution.txt"
echo "‚úÖ L∆∞u t·∫°i: ${DATA_DIR}/char_distribution.txt"

# --- T·∫°o unicharset ---
echo "üî§ T·∫°o unicharset..."
unicharset_extractor --norm_mode 2 --output_unicharset "${MODEL_DIR}/unicharset" "${GROUND_TRUTH_DIR}"/*.gt.txt 2> "${DATA_DIR}/unicharset_error.log" || {
    echo "‚ùå L·ªói t·∫°o unicharset:"
    cat "${DATA_DIR}/unicharset_error.log"
    exit 1
}

UNICHARSET_SIZE=$(wc -l < "${MODEL_DIR}/unicharset")
echo "üî¢ S·ªë k√Ω t·ª±: ${UNICHARSET_SIZE}"

NET_SPEC="[1,36,0,1 Ct3,3,16 Mp3,3 Lfys48 Lfx96 O1c${UNICHARSET_SIZE}]"  # ƒê∆°n gi·∫£n h√≥a m·∫°ng

# --- Ki·ªÉm tra v√† x·ª≠ l√Ω file .lstmf b·ªã thi·∫øu ---
echo "üîç Ki·ªÉm tra file .lstmf..."
if ! ls "${GROUND_TRUTH_DIR}"/*.lstmf >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .lstmf n√†o trong ${GROUND_TRUTH_DIR}"
    echo "‚ùå L·ªói: C·∫ßn √≠t nh·∫•t m·ªôt file .lstmf ƒë·ªÉ hu·∫•n luy·ªán"
    exit 1
fi

# T·∫°o th∆∞ m·ª•c ƒë·ªÉ l∆∞u c√°c file l·ªói
ERROR_DIR="${DATA_DIR}/error_files"
mkdir -p "${ERROR_DIR}"

# T√¨m c√°c file ·∫£nh thi·∫øu .lstmf
missing_files=()
skipped_files=()
for img in "${GROUND_TRUTH_DIR}"/*.{jpg,png,tif}; do
    if [ -f "$img" ]; then
        base=$(basename "$img" | sed 's/\.[^.]*$//')
        if [ ! -f "${GROUND_TRUTH_DIR}/${base}.lstmf" ]; then
            echo "‚ùå Thi·∫øu ${base}.lstmf cho $img"
            missing_files+=("$img")
        fi
    fi
done

# T·∫°o l·∫°i c√°c file .lstmf b·ªã thi·∫øu
if [ ${#missing_files[@]} -gt 0 ]; then
    echo "üì∏ T·∫°o c√°c file .lstmf b·ªã thi·∫øu..."
    for img in "${missing_files[@]}"; do
        base=$(basename "$img" | sed 's/\.[^.]*$//')
        echo "üì¶ T·∫°o .lstmf cho $img"
        tesseract "$img" "${GROUND_TRUTH_DIR}/${base}" --psm 13 --oem 1 lstm.train 2> "${DATA_DIR}/${base}_lstmf_error.log"
        if [ $? -eq 0 ] && [ -f "${GROUND_TRUTH_DIR}/${base}.lstmf" ]; then
            echo "‚úÖ ƒê√£ t·∫°o ${base}.lstmf"
        else
            echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ${base}.lstmf. Di chuy·ªÉn file ·∫£nh v√† li√™n quan ra th∆∞ m·ª•c l·ªói."
            cat "${DATA_DIR}/${base}_lstmf_error.log"
            mv "$img" "${ERROR_DIR}/" 2>/dev/null
            mv "${GROUND_TRUTH_DIR}/${base}.gt.txt" "${ERROR_DIR}/" 2>/dev/null
            mv "${GROUND_TRUTH_DIR}/${base}.box" "${ERROR_DIR}/" 2>/dev/null
            skipped_files+=("$base")
        fi
    done
fi

# B√°o c√°o c√°c file b·ªã b·ªè qua
if [ ${#skipped_files[@]} -gt 0 ]; then
    echo "‚ö†Ô∏è C√°c file sau ƒë√£ b·ªã b·ªè qua do kh√¥ng th·ªÉ t·∫°o .lstmf (ƒë√£ di chuy·ªÉn v√†o ${ERROR_DIR}):"
    for skipped in "${skipped_files[@]}"; do
        echo "- ${skipped}.lstmf"
    done
    echo "üìù Ti·∫øp t·ª•c hu·∫•n luy·ªán v·ªõi c√°c file .lstmf hi·ªán c√≥..."
else
    echo "‚úÖ T·∫•t c·∫£ file .lstmf c·∫ßn thi·∫øt ƒë√£ s·∫µn s√†ng ho·∫∑c ƒë√£ ƒë∆∞·ª£c t·∫°o"
fi

# --- Hu·∫•n luy·ªán ---
echo "üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán ${MODEL_NAME}..."
EARLY_STOP_LOG="${MODEL_DIR}/early_stop.log"
rm -f "${EARLY_STOP_LOG}"

# Ki·ªÉm tra checkpoint g·∫ßn nh·∫•t
CHECKPOINT_FILE=$(ls -t "${MODEL_DIR}"/*.checkpoint 2>/dev/null | head -n1)
if [ -n "$CHECKPOINT_FILE" ]; then
    echo "üîÑ Ti·∫øp t·ª•c hu·∫•n luy·ªán t·ª´ checkpoint: $CHECKPOINT_FILE"
    make training \
        MODEL_NAME="${MODEL_NAME}" \
        GROUND_TRUTH_DIR="${GROUND_TRUTH_DIR}" \
        TESSDATA_PREFIX="${TESSDATA_PREFIX}" \
        MAX_ITERATIONS="${MAX_ITERATIONS}" \
        LEARNING_RATE="${LEARNING_RATE}" \
        RATIO_TRAIN=0.80 \
        NET_SPEC="${NET_SPEC}" \
        START_MODEL="${MODEL_NAME}" \
        CHECKPOINT_FILE="${CHECKPOINT_FILE}" \
    | tee "${EARLY_STOP_LOG}"
else
    echo "üÜï B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán t·ª´ ƒë·∫ßu (kh√¥ng t√¨m th·∫•y checkpoint)"
    make training \
        MODEL_NAME="${MODEL_NAME}" \
        GROUND_TRUTH_DIR="${GROUND_TRUTH_DIR}" \
        TESSDATA_PREFIX="${TESSDATA_PREFIX}" \
        MAX_ITERATIONS="${MAX_ITERATIONS}" \
        LEARNING_RATE="${LEARNING_RATE}" \
        RATIO_TRAIN=0.80 \
        NET_SPEC="${NET_SPEC}" \
    | tee "${EARLY_STOP_LOG}"
fi

# --- Ki·ªÉm tra d·ª´ng s·ªõm ---
if grep -q "delta=" "${EARLY_STOP_LOG}"; then
    min_delta=$(grep -o 'delta=[0-9.]*%' "${EARLY_STOP_LOG}" | sed 's/delta=//' | sed 's/%//' | sort -n | head -n1)
    echo "üìâ Delta nh·ªè nh·∫•t: ${min_delta}%"
    stop_threshold=$(echo "${STOP_THRESHOLD} * 100" | bc -l)
    if (( $(echo "$min_delta < $stop_threshold" | bc -l) )); then
        echo "üõë D·ª´ng s·ªõm: delta < ${STOP_THRESHOLD}"
        exit 0
    fi
fi

# --- Copy traineddata ---
TRAINED_FILE="${MODEL_DIR}/${MODEL_NAME}.traineddata"
if [ -f "${TRAINED_FILE}" ]; then
    cp "${TRAINED_FILE}" "${TESSDATA_PREFIX}/" && \
    echo "‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t! ƒê√£ copy ${MODEL_NAME}.traineddata v√†o ${TESSDATA_PREFIX}" || {
        echo "‚ùå Kh√¥ng th·ªÉ copy traineddata"
        exit 1
    }
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y traineddata. Hu·∫•n luy·ªán c√≥ th·ªÉ ƒë√£ th·∫•t b·∫°i."
    exit 1
fi

# --- D·ª± ƒëo√°n v·ªõi test.png (n·∫øu c√≥) ---
TEST_IMAGE="${DATA_DIR}/test.png"
OUTPUT_FILE="${DATA_DIR}/output"
TRAINED_FILE="${MODEL_DIR}/${MODEL_NAME}.traineddata"
if [ -f "${TEST_IMAGE}" ]; then
    echo "üîé D·ª± ƒëo√°n t·ª´ ${TEST_IMAGE}..."
    # Ki·ªÉm tra file traineddata
    if [ ! -f "${TRAINED_FILE}" ] || [ $(stat -c%s "${TRAINED_FILE}") -lt 100000 ]; then
        echo "‚ö†Ô∏è File ${TRAINED_FILE} kh√¥ng t·ªìn t·∫°i ho·∫∑c qu√° nh·ªè. Th·ª≠ t·∫°o l·∫°i..."
        lstmtraining \
            --stop_training \
            --continue_from "${MODEL_DIR}/checkpoints/multi_lang_checkpoint" \
            --traineddata "${MODEL_DIR}/multi_lang.traineddata" \
            --model_output "${TRAINED_FILE}" \
            2> "${DATA_DIR}/lstmtraining_error.log"
        if [ $? -ne 0 ]; then
            echo "‚ùå L·ªói khi t·∫°o l·∫°i traineddata:"
            cat "${DATA_DIR}/lstmtraining_error.log"
            exit 1
        fi
        cp "${TRAINED_FILE}" "${TESSDATA_PREFIX}/" || {
            echo "‚ùå Kh√¥ng th·ªÉ copy traineddata"
            exit 1
        }
    fi
    # Ch·∫°y tesseract v√† ghi log l·ªói
    tesseract "${TEST_IMAGE}" "${OUTPUT_FILE}" -l "${MODEL_NAME}" --psm 3 --oem 1 2> "${DATA_DIR}/tesseract_error.log"
    if [ $? -eq 0 ] && [ -f "${OUTPUT_FILE}.txt" ]; then
        echo "‚úÖ K·∫øt qu·∫£ OCR:"
        cat "${OUTPUT_FILE}.txt"
    else
        echo "‚ùå L·ªói khi ch·∫°y tesseract tr√™n ·∫£nh test:"
        cat "${DATA_DIR}/tesseract_error.log"
        exit 1
    fi
else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y test.png ƒë·ªÉ ki·ªÉm th·ª≠"
fi